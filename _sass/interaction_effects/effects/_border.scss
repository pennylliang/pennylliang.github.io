@import '../variables';

@mixin loading {
  @include optimize();

  position: absolute;
  border:5px solid;
  border-radius:50%;
  border-color:rgba(255, 255, 255, 0.7) transparent transparent;
  top:0;
  bottom:0;
  left:0;
  right:0;
  opacity: 0;
  @include prefixed(transform, rotate(0deg));
  @include prefixed(animation-name, #{$nameSpace}-loading);
  @include prefixed(animation-duration, 2s);
  @include prefixed(animation-timing-function, linear);
}

@include keyframes(#{$nameSpace}-loading) {
  1% {
    opacity: 1;
  }
  99% {
    @include prefixed(transform, rotate(360deg));
    opacity: 1;
    // filter:hue-rotate(360deg); color can change
  }
  100% {
    opacity: 0;
  }
}

@mixin loading2 {
  @include optimize();

  position: absolute;
  background-clip: content-box;
  padding: 2.5px;
  border-radius:50%;
  border: 2.5px dashed $primaryColor;
  top:-5px;
  bottom:-5px;
  left:-5px;
  right:-5px;
  opacity: 0;
  @include prefixed(transform, rotate(0deg));
  @include prefixed(animation-name, #{$nameSpace}-loading2);
  @include prefixed(animation-duration, 700ms);
  @include prefixed(animation-timing-function, linear);
}

@include keyframes(#{$nameSpace}-loading2) {
  1% {
    opacity: 1;
  }
  99% {
    @include prefixed(transform, rotate(90deg));
    opacity: 1;
    // filter:hue-rotate(360deg); color can change
  }
  100% {
    opacity: 0;
  }
}

@mixin morph {
  @include optimize();

  @include prefixed(transform, rotate(0deg));
  @include prefixed(animation-name, #{$nameSpace}-morph);
  @include prefixed(animation-duration, 8s);
  @include prefixed(animation-timing-function, ease-in-out);
}

@include keyframes(#{$nameSpace}-morph) {
	50% {
		border-radius:  30% 60% 70% 40% / 50% 60% 30% 60%;
	}

	100% {
		border-radius:  60% 40% 30% 70% / 60% 30% 70% 40%;
	}
}

@mixin shine {
  @include optimize();
  position: absolute;
  top: -50%;
  left: -50%;
  z-index: 2;
  height: 200%;
  width: 200%;
  background: linear-gradient(to right, #fff 20%, #fff 40%, #ECD08C 50%, #ECD08C 55%, #fff 70%, #fff 100%);
  background-size: 200% auto;

  @include prefixed(transform, rotate(-45deg));
  @include prefixed(animation-name, #{$nameSpace}-shine);
  @include prefixed(animation-duration, 2s);
  @include prefixed(animation-timing-function, linear);
  @include prefixed(animation-iteration-count, infinite);
}

@include keyframes(#{$nameSpace}-shine) {
	to {
		background-position: 200% center;
	}
}

@mixin slide($direction, $borderWidth) {
  @include optimize();
  position: absolute;
  z-index: 9;
  background-color: rgba(255, 255, 255, 0.7);
  //transition: transform 700ms cubic-bezier(0.4, 0, 0.2, 1);
  @include prefixed(animation-name, #{$nameSpace}-slide);
  @include prefixed(animation-duration, 700ms);
  @include prefixed(animation-timing-function, cubic-bezier(0.4, 0, 0.2, 1));

  @if $direction == up {
    top: 0;
    left: 0;
    width: 100%;
    height: $borderWidth;
    @include prefixed(transform, translate3d(-105%, 0, 0));
  } @else if $direction == right {
    right: 0;
    width: $borderWidth;
    height: 100%;
    @include prefixed(transform, translate3d(0, -105%, 0));
  } @else if $direction == down {
    bottom: 0;
    left: 0;
    width: 100%;
    height: $borderWidth;
    @include prefixed(transform, translate3d(105%, 0, 0));
  } @else if $direction == left {
    left:0;
    width: $borderWidth;
    height: 100%;
    @include prefixed(transform, translate3d(0, 105%, 0));
  } @else {
    @error "Unknown direction #{$direction}"
  }
}

@include keyframes(#{$nameSpace}-slide) {
	to {
		transform: translate3d(0, 0, 0);
	}
}

$path-width: 2px;
@mixin clip {
  $path-width: 2px;
  $clip-distance: .05;

  @include optimize();
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;

  margin: -1 * $clip-distance * 100%;
  box-shadow: inset 0 0 0 $path-width rgba($primaryColor, .5);

  @include prefixed(animation-name, #{$nameSpace}-clip);
  @include prefixed(animation-duration, 8s);
}

@include keyframes(#{$nameSpace}-clip) {
	0%, 100% {
    clip-path: inset(0 0 calc(100% - #{$path-width}) 0)
  }
  25% {
    clip-path: inset(0 calc(100% - #{$path-width}) 0 0)
  }
  50% {
    clip-path: inset(calc(100% - #{$path-width}) 0 0 0)
  }
  75% {
    clip-path: inset( 0 0 0 calc(100% - #{$path-width}))
  }
}

@mixin psycho {
  @include optimize();
  @include prefixed(animation-name, #{$nameSpace}-psycho);
  @include prefixed(animation-duration, 2s);
}

@include keyframes(#{$nameSpace}-psycho) {
  0% {
    @include prefixed(transform, rotate(0deg) scale(1) translate(0, 0));
  }

  33% {
    @include prefixed(transform, rotate(360deg) scale(1) translate(5px, 5px));
  }

  66% {
    @include prefixed(transform, rotate(720deg) scale(1) translate(-5px, -5px));
  }

  100% {
    @include prefixed(transform, rotate(1080deg) scale(1) translate(0, 0));
  }
}

@mixin corner {
  @include optimize();
  @include prefixed(animation-name, #{$nameSpace}-corner);
  @include prefixed(animation-duration, 3s);
}

$s: 100% / 8;
$t: 0.001%;

@include keyframes(#{$nameSpace}-corner) {
  #{$s * 0} {
    border-top-left-radius: 1% 50%;
  }
  #{$s * 1} {
    border-top-left-radius: 50%;
    border-top-right-radius: 50%;
  }
  #{$s * 2} {
    border-top-right-radius: 1% 50%;
  }
  #{$s * 2 + $t} {
    border-top-right-radius: 50% 1%;
  }
  #{$s * 3} {
    border-top-right-radius: 50%;
    border-bottom-right-radius: 50%;
  }
  #{$s * 4} {
    border-bottom-right-radius: 50% 1%;
  }
  #{$s * 4 + $t} {
    border-bottom-right-radius: 1% 50%;
  }
  #{$s * 5} {
    border-bottom-right-radius: 50%;
    border-bottom-left-radius: 50%;
  }
  #{$s * 6} {
    border-bottom-left-radius: 1% 50%;
  }
  #{$s * 6 + $t} {
    border-bottom-left-radius: 50% 1%;
  }
  #{$s * 7} {
    border-bottom-left-radius: 50%;
    border-top-left-radius: 50%;
  }
  #{$s * 8} {
    border-top-left-radius: 50% 1%;
  }
}

@mixin bubble-body($size, $direct) {
  @include optimize();
  position: absolute;
  border-radius: 50%;
  height: $size;
  width: $size;
  top: calc(50% - #{$size}*0.5);
  @if $direct == left {
    left: 0;
  } @else {
    right: 0;
  }
  background-color: $primaryColor;
  opacity: 0;
  @include prefixed(animation-name, #{$nameSpace}-bubble-#{$direct});
  @include prefixed(animation-duration, 1s);
  @include prefixed(animation-timing-function, cubic-bezier(0.4, 0, 0.2, 1));
}

@mixin bubble($size, $distance, $direct) {

  @include bubble-body($size, $direct);
  @include keyframes(#{$nameSpace}-bubble-#{$direct}) {
    5% {
      width: calc(#{$size}*1.5);
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
    99% {
      width: $size;
    }
    100% {
      @include prefixed(transform, translate3d($distance, 0, 0));
      opacity: 0;
    }
  }
}
